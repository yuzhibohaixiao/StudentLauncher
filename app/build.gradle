import java.util.regex.Matcher
import java.util.regex.Pattern

plugins {
    id 'com.android.application'
    id 'com.aliyun.ams.emas-services'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
//    id 'newlens'
}

def releaseTime() {
    return new Date().format("yyMMdd", TimeZone.getTimeZone("GMT+08:00"))
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"
    signingConfigs {
//        debug {
//            storeFile file('../sign/platformUBI.jks') // devplatform: 鑫中宏
//            storePassword 'android' // system   鑫中宏: 123456   ubi: android
//            keyAlias 'key' //'nanopc-system' 鑫中宏 android ubi: key
//            keyPassword 'android' // system  鑫中宏123456   ubi: android
//            v1SigningEnabled true
//            v2SigningEnabled true
//        }

        debug {
            storeFile file('../sign/devplatform.jks') // devplatform: 鑫中宏
            storePassword '123456' // system   鑫中宏: 123456   ubi: android
            keyAlias 'android' //'nanopc-system' 鑫中宏 android ubi: key
            keyPassword '123456' // system  鑫中宏123456   ubi: android
            v1SigningEnabled true
            v2SigningEnabled true
        }
        release_3399 {
            storeFile file('../sign/devplatform.jks') // devplatform: 鑫中宏
            storePassword '123456' // system   鑫中宏: 123456   ubi: android
            keyAlias 'android' //'nanopc-system' 鑫中宏 android ubi: key
            keyPassword '123456' // system  鑫中宏123456   ubi: android
            v1SigningEnabled true
            v2SigningEnabled true
        }

        release_3566 {
            storeFile file("../sign/rk3566.keystore")
            storePassword 'caration'
            keyAlias 'caration'
            keyPassword 'caration'
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    defaultConfig {
        applicationId "com.alight.android.aoa_launcher"
        minSdkVersion 23
        targetSdkVersion 30
        versionCode project.APP_VERSION_CODE as int
        versionName project.APP_VERSION_NAME as String
        multiDexEnabled true
        signingConfig signingConfigs.debug
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        ndk {
            //选择要添加的对应 cpu 类型的 .so 库。
            abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
//             还可以添加 'x86', 'x86_64', 'mips', 'mips64'
        }
        manifestPlaceholders = [
                JPUSH_PKGNAME: "com.alight.android.aoa_launcher",
                JPUSH_APPKEY : "7e4d2631fca6370d618cb857", //JPush 上注册的包名对应的 Appkey.
                JPUSH_CHANNEL: "developer-default", //暂时填写默认值即可.
        ]
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            debuggable true

        }
        debug {
            signingConfig signingConfigs.debug
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    lintOptions {
        abortOnError false
    }

    //flavor配置
    flavorDimensions "chip", "oem"
    productFlavors {
        _chip_3399 {
            dimension "chip"
            signingConfig signingConfigs.release_3399
            buildConfigField("String", "MMKV_PATH", "\"/data/media/0/alight_mmkv/\"")
        }

        _chip_3566 {
            dimension "chip"
            signingConfig signingConfigs.release_3566
            buildConfigField("String", "MMKV_PATH", "\"/sdcard/alight_mmkv/\"")

        }

        _oem_self_test {
            dimension "oem"
            buildConfigField("String", "API_HOST", "\"test.api.alight-sys.com\"")
        }

        _oem_self_pre {
            dimension "oem"
            buildConfigField("String", "API_HOST", "\"pre-api.alight-sys.com\"")
        }

        _oem_self_prod {
            dimension "oem"
            buildConfigField("String", "API_HOST", "\"api.alight-sys.com\"")
        }

        _oem_guangfeng_test {
            dimension "oem"
            buildConfigField("String", "API_HOST", "\"appotronics.api.alight-sys.com\"")
        }

        _oem_guangfeng_prod {
            dimension "oem"
            buildConfigField("String", "API_HOST", "\"appotronics.api.alight-sys.com\"")
        }

    }

    // copy 到对应的位置
    applicationVariants.all { variant ->
        def oldVersion = variant.versionName;
        String tskReqStr = gradle.getStartParameter().getTaskRequests().toString()
        def version_env = "test";
        if (tskReqStr.contains("_pre")) {
            version_env = "pre-release"
        } else if (tskReqStr.contains("_test")) {
            version_env = "test"
        } else if (tskReqStr.contains("_prod")) {
            version_env = "prod-release"
        }
        def versionName = oldVersion + "-" + version_env
        Pattern chip_pattern = Pattern.compile("_chip_(\\w+)(_)")
        Matcher chip_matcher = chip_pattern.matcher(tskReqStr)
        String chip = "3399"
        if (chip_matcher.find()) {
            chip = chip_matcher.group(1)
        }
        def name = "launcher_${chip}_${project.APP_VERSION_CODE}_${versionName}_${project.AOS_VERSION}_${releaseTime()}.apk"
        variant.outputs.each { output ->
            output.versionNameOverride = versionName;
        }
        variant.assemble.doLast {
            variant.outputs.forEach { file ->
                ant.copy file: file.outputFile,
                        tofile: "${project.rootDir}/launcher_build/$name"
            }
        }
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation files('libs/QWeather_Public_Android_V4.5.jar')
    implementation files('libs/ant.jar')
//    implementation files('libs/bridge-release-v0.1.1-20210720.aar')
//    implementation files('libs/ahwsdk-release-v0.1.0-20210720.aar')
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    implementation "com.aliyun.dpa:oss-android-sdk:2.9.5"
    implementation('com.aliyun.ams:alicloud-android-ha-adapter:1.1.5.1-open')
    implementation('com.aliyun.ams:alicloud-android-ha-crashreporter:1.2.5')

    //utils
//    implementation 'com.blankj:utilcodex:1.29.0'

    //kv storage
//    implementation 'com.orhanobut:hawk:2.0.1'

    //network
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    implementation "com.squareup.okhttp3:okhttp-urlconnection:$okhttp_version"
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"

    implementation 'com.squareup.okhttp3:logging-interceptor:3.8.1'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'

    //kt reflect
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    //json
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit_version"

    //jet pack
//    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
//    implementation 'androidx.lifecycle:lifecycle-livedata:2.2.0'
//    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0'
//    implementation 'androidx.fragment:fragment-ktx:1.2.5'
//    implementation 'androidx.activity:activity-ktx:1.1.0'
//    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'

    //multi dex
    implementation 'androidx.multidex:multidex:2.0.0'

    //协程
//    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.9'
    implementation 'com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:0.9.2'

    implementation 'com.github.JakeWharton:ViewPagerIndicator:2.4.1'

    //socketio
    // socketio
    implementation('io.socket:socket.io-client:2.0.1')

    //BRVAH
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:3.0.4'
    //MMKV
    implementation 'com.tencent:mmkv-static:1.2.12'

    //XUpdate
    implementation 'com.github.xuexiangjys:XUpdate:2.0.7'
    implementation 'com.github.xuexiangjys.XUpdateAPI:xupdate-easy:1.0.0'
    // 如果需要使用断点续传下载功能的话添加该依赖（可选）
    implementation 'com.github.xuexiangjys.XUpdateAPI:xupdate-downloader-aria:1.0.0'

    //听云
//    implementation "com.networkbench:tingyun-ea-agent-android:$tingyun_sdk_version"
    //听云采集native carsh 需集成此包
//    implementation "com.networkbench.newlens.agent.android2:nbs.newlens.nativecrash:$tingyun_ndk_version"

    //动态权限获取库
    implementation 'com.permissionx.guolindev:permissionx:1.4.0'

    implementation 'com.github.bumptech.glide:glide:4.11.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'
//    implementation 'com.github.bumptech.glide:okhttp3-integration:4.11.0'

    // core
    implementation "com.liulishuo.okdownload:okdownload:$okdownload_version"
// provide sqlite to store breakpoints
    implementation "com.liulishuo.okdownload:sqlite:$okdownload_version"
// provide okhttp to connect to backend
// and then please import okhttp dependencies by yourself
//    implementation "com.liulishuo.okdownload:okhttp:$okdownload_version"
// provide interface to match filedownloader
    implementation "com.liulishuo.okdownload:filedownloader:$okdownload_version"
// provide interface for kotlin extension
//    implementation "com.liulishuo.okdownload:ktx$okdownload_version"
    implementation 'org.xutils:xutils:3.8.2'

    implementation 'com.alight.ahwcx:bridge:1.1.4'
    implementation 'com.alight.ahwcx:ahwsdk:1.1.4'

    implementation 'com.github.JessYanCoding:AndroidAutoSize:v1.2.1'

    implementation 'com.github.pinguo-zhouwei:CustomPopwindow:2.1.1'

//    implementation 'com.github.rubensousa:previewseekbar:3.0.0'
    implementation 'com.xw.repo:bubbleseekbar:3.20-lite'
    implementation 'org.greenrobot:eventbus:3.1.1'

    implementation 'io.github.csdn-mobile:RoundView:1.7.1'
    //JPush
    implementation 'cn.jiguang.sdk:jpush:4.4.5'
    implementation 'cn.jiguang.sdk:jcore:3.1.0'

    implementation 'com.daimajia.androidanimations:library:2.4@aar'
}

task aos_chip_3399_self_test_builder(group: "aos") {
    dependsOn("assemble_chip_3399_oem_self_testRelease")
}
task aos_chip_3399_self_pre_builder(group: "aos") {
    dependsOn("assemble_chip_3399_oem_self_preRelease")
}
task aos_chip_3399_self_prod_builder(group: "aos") {
    dependsOn("assemble_chip_3399_oem_self_prodRelease")
}
task aos_chip_3566_self_test_builder(group: "aos") {
    dependsOn("assemble_chip_3566_oem_self_testRelease")
}
task aos_chip_3566_self_prod_builder(group: "aos") {
    dependsOn("assemble_chip_3566_oem_self_prodRelease")
}